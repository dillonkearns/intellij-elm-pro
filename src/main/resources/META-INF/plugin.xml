<idea-plugin>
    <id>25470</id>
    <name>Elm Pro</name>
    <vendor url="https://incrementalelm.com/">Incremental Elm Consulting</vendor>

    <description>Editing and advanced refactoring support for Elm projects.</description>
    <description><![CDATA[
Provides editing and refactoring support for the <a href="https://elm-lang.org">Elm programming language</a>.<br/>

Compared to the Elm, Elm Pro adds refactoring support and new integrations and features, and more up-to-date platform support.


Refactoring Support:<br/>
<ul>
    <li>Extract function</li>
    <li>Move definition (to new or existing file)</li>
</ul>

Features and Integrations:<br/>

<ul>
    <li>elm-review integration (in-editor highlights and quick fixes)</li>
    <li>Show outdated packages in elm.json</li>
    <li>Go to definition and rename for @docs annotations</li>
    <li>Code completion</li>
    <li>Go to declaration</li>
    <li>Go to symbol</li>
    <li>Find usages</li>
    <li>Type Inference and Type Checking</li>
    <li>Rename refactoring</li>
    <li>Introduce "variable" refactoring (let/in)</li>
    <li>Generate JSON encoders/decoders</li>
    <li>Generate type annotation for un-annotated function</li>
    <li>Graphical UI for running elm-test</li>
    <li>Re-format code using elm-format</li>
    <li>Detect unused code</li>
    <li>Detect and remove unused imports</li>
    <li>'Add Import' quick fix for unresolved references</li>
    <li>Code folding</li>
    <li>Structure view</li>
    <li>Syntax highlighting</li>
    <li>WebGL/GLSL support</li>
    <li>Spell checking</li>
    <li>etc.</li>
</ul>
    ]]></description>
    <product-descriptor code="PELMPRO" release-date="20241007" release-version="20242"/>

    <!-- please see https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.json</depends>

    <extensions defaultExtensionNs="com.intellij">
    <additionalTextAttributes scheme="Default" file="colorSchemes/ElmDefault.xml"/>
        <additionalTextAttributes scheme="Darcula" file="colorSchemes/ElmDarcula.xml"/>
        <annotator language="Elm" implementationClass="org.elm.ide.highlight.ElmSyntaxHighlightAnnotator"/>
        <colorSettingsPage implementation="org.elm.ide.color.ElmColorSettingsPage"/>
        <projectConfigurable instance="org.elm.ide.settings.ElmExternalLinterConfigurable"
                             parentId="language.elm"
                             id="language.elm.settings"
                             bundle="messages.ElmBundle" key="settings.rust.external.linters.name"/>
        <lang.documentationProvider language="Elm" implementationClass="org.elm.ide.docs.ElmDocumentationProvider"/>
        <projectService serviceImplementation="org.elm.ide.settings.ElmExternalLinterProjectSettingsService"/>
        <projectService serviceImplementation="org.elm.ide.settings.ElmProjectSettingsService"/>


        <enterHandlerDelegate implementation="org.elm.ide.typing.ElmOnEnterIndentHandler"/>
        <fileType name="Elm file" implementationClass="org.elm.lang.core.ElmFileType" fieldName="INSTANCE"
                  language="Elm" extensions="elm" />
        <internalFileTemplate name="Elm Module"/>
        <gotoSymbolContributor implementation="org.elm.ide.navigation.ElmGoToSymbolContributor"/>
        <lang.braceMatcher language="Elm" implementationClass="org.elm.ide.ElmPairedBraceMatcher"/>
        <lang.commenter language="Elm" implementationClass="org.elm.ide.commenter.ElmCommenter"/>
        <typedHandler implementation="org.elm.ide.ElmTypedHandler" id="ElmFile"/>
        <completion.contributor language="Elm"
                                implementationClass="org.elm.lang.core.completion.ElmCompletionContributor"/>
        <breadcrumbsInfoProvider implementation="org.elm.ide.structure.ElmBreadcrumbsProvider"/>
        <lang.findUsagesProvider language="Elm" implementationClass="org.elm.ide.search.ElmFindUsagesProvider"/>
        <lang.namesValidator language="Elm" implementationClass="org.elm.ide.refactoring.ElmNamesValidator"/>
        <lang.parserDefinition language="Elm" implementationClass="org.elm.lang.core.parser.ElmParserDefinition"/>
        <lang.psiStructureViewFactory language="Elm"
                                      implementationClass="org.elm.ide.structure.ElmStructureViewFactory"/>
        <lang.refactoringSupport language="Elm"
                                 implementationClass="org.elm.ide.refactoring.ElmRefactoringSupportProvider"/>
        <renamePsiElementProcessor implementation="org.elm.ide.refactoring.ElmRenamePsiFileProcessor"/>
        <refactoring.moveHandler id="elm.moveTopLevelItems"
                                 implementation="org.elm.ide.refactoring.move.ElmMoveTopLevelItemsHandler" />

        <inlineActionHandler implementation="org.elm.ide.refactoring.ElmInlineFunctionHandler"/>
        <renamePsiElementProcessor implementation="org.elm.ide.refactoring.ElmRenamePsiElementProcessor"/>
        <lang.syntaxHighlighterFactory language="Elm"
                                       implementationClass="org.elm.ide.highlight.ElmSyntaxHighlighterFactory"/>
        <spellchecker.support language="Elm" implementationClass="org.elm.ide.spelling.ElmSpellCheckingStrategy"/>
        <lang.foldingBuilder language="Elm" implementationClass="org.elm.ide.folding.ElmFoldingBuilder"/>
        <importFilteringRule implementation="org.elm.ide.usages.ElmImportFilteringRule"/>
        <lang.quoteHandler language="Elm" implementationClass="org.elm.ide.typing.ElmQuoteHandler"/>
        <backspaceHandlerDelegate implementation="org.elm.ide.typing.ElmBackspaceHandler"/>
        <codeInsight.parameterInfo language="Elm" implementationClass="org.elm.ide.hints.ElmParameterInfoHandler"/>
        <codeInsight.typeInfo language="Elm" implementationClass="org.elm.ide.hints.ElmExpressionTypeProvider"/>
        <codeInsight.parameterNameHints language="Elm"
                                        implementationClass="org.elm.ide.hints.parameter.ElmInlayParameterHintsProvider"/>
        <codeInsight.lineMarkerProvider language="Elm" implementationClass="org.elm.ide.lineMarkers.ElmLineMarkerProvider"/>
        <runLineMarkerContributor language="Elm"
                                  implementationClass="org.elm.ide.lineMarkers.ElmTestRunLineMarkerContributor"/>
        <lang.smartEnterProcessor language="Elm" implementationClass="org.elm.ide.typing.ElmSmartEnterProcessor"/>
        <extendWordSelectionHandler implementation="org.elm.ide.wordSelection.ElmDeclAnnotationSelectionHandler"/>
        <lang.importOptimizer language="Elm" implementationClass="org.elm.ide.refactoring.ElmImportOptimizer"/>
        <colorProvider implementation="org.elm.ide.color.ElmColorProvider"/>
        <codeStyleSettingsProvider implementation="org.elm.ide.formatter.settings.ElmCodeStyleSettingsProvider"/>
        <langCodeStyleSettingsProvider implementation="org.elm.ide.formatter.settings.ElmLanguageCodeStyleSettingsProvider"/>

        <!-- New Project for IDEA -->
        <projectTemplatesFactory implementation="org.elm.ide.project.ElmProjectTemplatesFactory" />

        <!-- New Project for WebStorm -->
        <directoryProjectGenerator implementation="org.elm.ide.project.ElmWebProjectTemplate"/>

        <testFinder implementation="org.elm.ide.navigation.ElmTestFinder"/>


        <!-- DEPRECATED. See `ElmModuleType` for details! -->
        <moduleType id="ELM_MODULE" implementationClass="org.elm.ide.project.ElmModuleType"/>


        <!-- Inspections -->

        <lang.inspectionSuppressor language="Elm"
                                   implementationClass="org.elm.ide.inspections.ElmInspectionSuppressor"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Type checker"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmTypeInferenceInspection"/>

        <highlightingPassFactory implementation="org.elm.ide.annotator.ElmHighlightingPassFactoryRegistrar"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Type declaration checker"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmTypeDeclarationInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Add missing case branches"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmIncompletePatternInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Tuple too large"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmTupleSizeInspection"/>


        <localInspection language="Elm" groupName="Elm"
                         displayName="Unused symbol"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.elm.ide.inspections.ElmUnusedSymbolInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Unused import"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.elm.ide.inspections.ElmUnusedImportInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Unresolved reference"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmUnresolvedReferenceInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Invalid (..) on alias import"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmExposingAliasVariantsInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Conflicting declarations"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmDuplicateDeclarationInspection"/>

        <localInspection language="Elm" groupName="Elm"
                         displayName="Top-level destructuring is forbidden"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="org.elm.ide.inspections.ElmTopLevelDestructuringInspection"/>

        <localInspection language="JSON" groupName="Elm"
                         enabledByDefault="true"
                         level="WARNING"
                         implementationClass="org.elm.json.inspections.NewPackageVersionAvailableInspection"
                         displayName="New package version available"/>

        <!-- Intentions -->

        <intentionAction>
            <className>org.elm.ide.intentions.exposure.ExposeIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.exposure.ExposeWithVariantsIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.exposure.ExposeVariantsIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.PipelineIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.RemovePipelineIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.exposure.StopExposingIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.exposure.StopExposingVariantsIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.MapToFoldIntention</className>
            <category>Elm</category>
            <language>Elm</language>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.MaybeDefaultIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.UnqualifyIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.LiftLetIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.InvertIfConditionIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.MaybeDefaultToCaseIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.WrapWithLambdaIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.UnwrapLambdaIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.RegularToTripleQuotedStringIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <language>Elm</language>
            <className>org.elm.ide.intentions.TripleQuotedToRegularStringIntention</className>
            <category>Elm</category>
        </intentionAction>
        <localInspection language="Elm" groupName="Elm"
                         displayName="Missing annotation"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="org.elm.ide.intentions.ElmMissingAnnotationInspection"/>
        <intentionAction>
            <className>org.elm.ide.intentions.MakeDecoderIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.MakeEncoderIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.RecordConstructorToLiteralIntention</className>
            <category>Elm</category>
        </intentionAction>
        <intentionAction>
            <className>org.elm.ide.intentions.InlineDebugIntention</className>
            <category>Elm</category>
        </intentionAction>

        <!-- ELM PROJECTS, PACKAGES AND DEPENDENCIES -->
        <projectService serviceImplementation="org.elm.workspace.ElmWorkspaceService"/>
        <additionalLibraryRootsProvider implementation="org.elm.workspace.ElmAdditionalLibraryRootsProvider"/>
        <projectConfigurable instance="org.elm.workspace.ui.ElmWorkspaceConfigurable" displayName="Elm"
                             id="language.elm"
                             groupId="language"/>

        <editorNotificationProvider implementation="org.elm.ide.notifications.ElmNeedsConfigNotificationProvider"/>
        <statusBarWidgetFactory id="elmReviewWidget"
                                implementation="org.elm.ide.status.ElmReviewWidgetFactory"
                                order="first"/>


        <toolWindow id="Elm" anchor="right" icon="/icons/elm-toolwindow.png"
                    factoryClass="org.elm.ide.toolwindow.ElmToolWindowFactory"/>
        <toolWindow id="Elm Compiler" anchor="bottom" icon="/icons/elm-toolwindow.png"
                    factoryClass="org.elm.ide.toolwindow.ElmCompilerToolWindowFactory"/>
        <toolWindow id="elm-review" anchor="bottom" secondary="false" icon="/icons/elm-toolwindow.png"
                    factoryClass="org.elm.ide.toolwindow.ElmReviewToolWindowFactory"/>
        <toolWindow id="Friendly Messages" anchor="bottom" secondary="true" icon="/icons/elm-toolwindow.png"
                    factoryClass="org.elm.ide.toolwindow.ReportsToolWindowFactory"/>


        <!-- STUBS -->
        <stubElementTypeHolder class="org.elm.lang.core.psi.ElmTypes"/>
        <stubIndex implementation="org.elm.lang.core.stubs.index.ElmModulesIndex"/>
        <stubIndex implementation="org.elm.lang.core.stubs.index.ElmNamedElementIndex"/>

        <multiHostInjector implementation="org.elm.ide.injection.ElmGlslInjector"/>

        <liveTemplateContext implementation="org.elm.ide.livetemplates.ElmLiveTemplateContext$Generic" contextId="ELM"/>
        <liveTemplateContext implementation="org.elm.ide.livetemplates.ElmLiveTemplateContext$TopLevel" contextId="ELM_TOP_LEVEL" baseContextId="ELM" />
        <liveTemplateContext implementation="org.elm.ide.livetemplates.ElmLiveTemplateContext$Expression" contextId="ELM_EXPRESSION" baseContextId="ELM" />
        <liveTemplateContext implementation="org.elm.ide.livetemplates.ElmLiveTemplateContext$ValueDecl" contextId="ELM_VALUE_DECL" baseContextId="ELM"/>
        <defaultLiveTemplates file="/liveTemplates/Elm.xml"/>

        <configurationType implementation="org.elm.ide.test.run.ElmTestRunConfigurationType"/>
        <programRunner implementation="org.elm.ide.test.run.ElmTestProgramRunner"/>
        <runConfigurationProducer implementation="org.elm.ide.test.run.ElmTestRunConfigurationProducer"/>
        <projectService serviceImplementation="org.elm.ide.test.run.ElmTestAutoTestManager"/>
        <notificationGroup id="ElmNotification"
                           displayType="BALLOON"
                           key="notification.group.name"/>
    </extensions>
    <extensions defaultExtensionNs="JavaScript">
        <JsonSchema.ProviderFactory implementation="org.elm.json.ElmJsonSchemaProviderFactory"/>
    </extensions>

    <project-components>
        <component>
            <implementation-class>org.elm.ide.components.ElmFormatOnFileSaveComponent</implementation-class>
        </component>
    </project-components>

    <projectListeners>
        <listener class="org.elm.ide.status.ElmReviewWidgetUpdater"
                  topic="org.elm.workspace.ElmReviewService$ElmReviewWatchListener"/>
    </projectListeners>

    <actions>
        <action id="Elm.NewFile"
                class="org.elm.ide.actions.ElmCreateFileAction"
                text="Elm File"
                description="Create new Elm file">
            <add-to-group group-id="NewGroup" anchor="before" relative-to-action="NewFile"/>
        </action>

        <action id="Elm.AttachElmProject"
                class="org.elm.workspace.ElmAttachProjectAction"
                text="Attach elm.json project file"
                icon="AllIcons.General.Add">
        </action>

        <action id="Elm.DetachElmProject"
                class="org.elm.workspace.ElmDetachProjectAction"
                text="Detach elm.json project file"
                icon="AllIcons.General.Remove"/>

        <action id="Elm.RefreshElmProjects"
                class="org.elm.workspace.ElmRefreshProjectsAction"
                text="Refresh Elm Projects"
                icon="AllIcons.Actions.Refresh"/>

        <action id="Elm.RunExternalElmFormat"
                class="org.elm.ide.actions.ElmExternalFormatAction"
                text="Run elm-format on current file">
            <add-to-group group-id="CodeMenu" anchor="last"/>
        </action>
        <group id="Elm.WorkspaceToolsGroup" text="Elm" popup="true">
            <reference id="Elm.RefreshElmProjects"/>
            <separator/>
            <reference id="Elm.AttachElmProject"/>
            <reference id="Elm.DetachElmProject"/>

            <add-to-group group-id="ToolsMenu"/>
        </group>

        <action id="Elm.Build"
                class="org.elm.workspace.compiler.ElmBuildAction"
                text="Build Elm Project"
                icon="AllIcons.Toolwindows.ToolWindowBuild"
                keymap="$default">
            <keyboard-shortcut first-keystroke="alt shift P" keymap="$default"/>
        </action>

        <group id="Elm.CompilerToolsGroup" text="Elm Compiler" popup="true">
            <reference id="Elm.Build"/>
            <add-to-group group-id="Elm.WorkspaceToolsGroup"/>
        </group>
    </actions>

</idea-plugin>
